1.how to use @value for accessing props data ..it can be either .props or .yaml..for both same syntax
  a.use direct key in @value
  b.use @configurationproperties and create seperate class for grouping some properties like db things


2.props can be .properties OR .yml files
  .yaml removes duplicate keys..syntax to remove duplicate keys is semicolon
  in yaml files we can use exactly same like .properties file

3.environment specific using spring profiles
  use application-<profile>.yml OR applicaton-<profile>.properties
   in main application.yml use spring.profiles.active=<profile-name>
    after building jar at once we can use different profiles like we can override spring.profiles.active property from
    command line args "java -jar <jarname> --spring.profiles.active=qa"

   Note:assume in appilcation.yml there are three keys .first ,second and third one is profile one
        in application-dev.yml there will be only first key..noe if use qa profile as active then 
        two profiles are active(default and qa)..qa keys will override default keys..
        by default at first it will check localhost:8888 for configs..so to avoid this use bootstrap.yml instead of application.yml


4.config server and config client(microservice)
      just like env specfic but files present in github..service will ask config server .config picks from github
      and gives to service..

     ACtuator is s dependency it will expose endpoints like health,refresh
   endpoinf:actuator/refresh used for refreshing service which classes has @RefreshScope Annotation

5.communication between micro services ..Never use list as response for any rest api
   a.we can use RestTemplate to call other micro services..
     just initialize been with @bean and no sepearte dependency is not required
     ..but rest template is going to deprcate use webclient
     excercises done for get and post request check repo..
      only sync calls for rest template
    
   b.use WebClient for this dependency name is "reactive web" ..so using this web client api calls code 
     will be in react tech type..main singnificance is we can do sync and async calls with this approach..
     excercise failed using webclient..learn webclient after some days 

6.while communicating services between they need uri's to communicate with others
  doing hardcoding and application.properties is not good way ..because services deployed is dynamically so ip addresses are
  assigned dnamically..so service discovery is the concept came into picture..
  so netflix provided a open source solution ..one of them is eureka server..
  eureka server used as registry so that each service will get other service uris..
   dont need to install eureka server,..spring provided abstract api which will internally call eureka one..
  This eureka will be used as one seperate service.
  while createing spring-cloud eureka server..dependency  "Eureka-Server" will be added"
  all clients(main services) are regiestered in Eureka server..Eureka Server is also a Eureka client so that eureka servers(more than one will communicate)
  Eureka server is a client side discovery not a server side discovery but all are abstracted by spring
  client side discovery --giving another service uri by eureka server
  server side discovery--seb=nd message to service via server side discoveryservice..thos will send request..it acts as gateway
  ..all micro services has to be register so a dependency called  "eureka client" has to be added to all micro services dependices
  Eureka server is also do load balancing ..think about this
  ..there can be situation where services will be down but eureka server eill give uri of service.so to avoid this clients
   will send heart beats continuosly..if heartbeat doestn't vcame from service then eureka will remove that service from registry..
  no need to write single line of code in eureka server ..just update props and aadd @EnableEurekaServer thats it..
  ..In in microservices(eureka client) include one dependency and some props has to be included to register in eureka server

  
      
     
  