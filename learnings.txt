1.how to use @value for accessing props data ..it can be either .props or .yaml..for both same syntax
  a.use direct key in @value
  b.use @configurationproperties and create seperate class for grouping some properties like db things


2.props can be .properties OR .yml files
  .yaml removes duplicate keys..syntax to remove duplicate keys is semicolon
  in yaml files we can use exactly same like .properties file

3.environment specific using spring profiles
  use application-<profile>.yml OR applicaton-<profile>.properties
   in main application.yml use spring.profiles.active=<profile-name>
    after building jar at once we can use different profiles like we can override spring.profiles.active property from
    command line args "java -jar <jarname> --spring.profiles.active=qa"

   Note:assume in appilcation.yml there are three keys .first ,second and third one is profile one
        in application-dev.yml there will be only first key..noe if use qa profile as active then 
        two profiles are active(default and qa)..qa keys will override default keys..
        by default at first it will check localhost:8888 for configs..so to avoid this use bootstrap.yml instead of application.yml


4.config server and config client(microservice)
      just like env specfic but files present in github..service will ask config server .config picks from github
      and gives to service..

     ACtuator is s dependency it will expose endpoints like health,refresh
   endpoinf:actuator/refresh used for refreshing service which classes has @RefreshScope Annotation

5.communication between micro services ..Never use list as response for any rest api
   a.we can use RestTemplate to call other micro services..
     just initialize been with @bean and no sepearte dependency is not required
     ..but rest template is going to deprcate use webclient
     excercises done for get and post request check repo
   b.
  
      
     
  